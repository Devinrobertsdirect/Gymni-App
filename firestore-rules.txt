# Firestore Security Rules
# Copy and paste these rules into Firebase Console > Firestore > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role-based access
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isManager() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }
    
    function isClient() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'client';
    }
    
    function isOwnerOrAdmin(userId) {
      return request.auth != null && 
        (request.auth.uid == userId || isAdmin());
    }

    // Users can only access their own user document, admins can access all
    match /users/{userId} {
      allow read, write: if isOwnerOrAdmin(userId);
    }
    
    // Workout events - users can only access their own workouts
    match /workoutEvents/{eventId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Challenges - users can read all challenges but only write their own
    match /challenges/{challengeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Challenge participants - users can read/write their own participation
    match /challengeParticipants/{participantId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Social feed posts - users can read all posts but only write their own
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Post likes - users can read all likes but only write their own
    match /postLikes/{likeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Workout templates - role-based access
    match /workoutTemplates/{templateId} {
      allow read: if request.auth != null && (
        resource.data.isPublic == true || 
        isAdmin() ||
        (isManager() && resource.data.createdBy == request.auth.uid) ||
        (isClient() && resource.data.createdBy == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedTrainerId)
      );
      allow create: if request.auth != null && (isAdmin() || isManager());
      allow update, delete: if request.auth != null && (
        isAdmin() || 
        (isManager() && resource.data.createdBy == request.auth.uid)
      );
    }
    
    // User progress tracking
    match /userProgress/{progressId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // App settings and announcements - public read, admin write
    match /appSettings/{settingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.admin == true;
    }
  }
}
